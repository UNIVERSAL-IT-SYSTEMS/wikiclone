{{WIP}}
= Scope =
Article aims to provide single article that explains basics of arch tester's work.

= Prerequisites =
This article assumes that readers passed Arch Tester (AT) quiz and know basics of work with shell, Portage and bugzilla. Also assumes reader knows the drill of package stabilization.<br />
Recommended tools are:

{| class="wikitable"
|-
! Name !! Description !! How-to-use
|-
| tatt || arch testing tool || [https://github.com/tom111/tatt/blob/master/manual.org tatt's manpage]
|-
| eix || useful utilities for package searching || [http://en.gentoo-wiki.com/wiki/Eix eix on unofficial wiki]
|-
| ccache || compiler cache || [http://linux.die.net/man/1/ccache ccache's manpage]
|}

== stable enough system ==
System used for arch testing should be considered stable, this does not mean that tree must be ''stable'' though.

== make.conf ==
AT box should use mix of reasonably stable global CFLAGS (no -funsafe-optimizations, -funroll-loops etc).
Official x86 AT FAQ suggests these flags:

<pre>
LDFLAGS="${LDFLAGS} -Wl,--hash-style=gnu
FEATURES="test collision-protect"
</pre>

{{Note |<nowiki>
FEATURES=test may be redundant if you plan to use tatt.
</nowiki>}}

Other useful flags are ''GFLAGS="-g3 -ggdb"'' and ''USE="debug"'', these are, however, only meant to be used on per package basis in case you can (and want to) provide nice bug reports and show some love to developers.

= Build testing =

== ebuild checking and repoman ==
Repoman is tool that checks ebuilds for common mistakes (hey, maintainers are people too). Rule of thumb dictates that only repoman-checked ebuilds should go into the tree, but this ain't always true especially is ebuilds are big and complicated. As an AT, you should be able to use this tool to check ebuilds and then go over ebuild itself to verify that warnings will cause no problems.<br />
<todo> Another thing to do is to remove unneeded die checks in EAPI-4 functions <insert more info here with relevant links>. <br />
<todo> Insert some info on B/RDEP validating within ebuild.

== rdep checking ==
Ago 
[http://www.gossamer-threads.com/lists/gentoo/dev/246347#246347%20 provided] 
simple shell script that utilizes scanelf (''app-misc/pax-utils'') and qlist (''app-portage/portage-utils'') to check for rdeps:

{{File|/usr/local/bin/rdepscan|check for rdeps|
<pre>
#!/bin/bash
qlist -e "$@" | xargs scanelf -L -n -q -F '%n #F' | tr , ' ' | xargs qfile -Cv
| sort -u | awk '{print $1}' | uniq
</pre>}}
{{Note| Some dependencies are covered in ebuild by inherited eclasses, glibc and such are to be ignored}}

Similar script that uses portage files can be used to see deps on per-exectuable basis:
{{File|/usr/local/bin/rdepscan2||
<pre>
#!/bin/sh
if [ $# -eq 0 ]; then echo "expects package atom as first argument" >&2; exit; fi
find /var/db/pkg/ -name NEEDED | grep "$@" | xargs cat
</pre>}}

== tatt ==
tatt is simple tool that creates automated test suite that attempts to emerge package with various use-flag combinations. Packages are emerged multiple times so ccache may be very useful and having FEATURES=test is a bad idea time-wise. <br />

Example usage (using bug number):
{{RootCmd |tatt -b 423987 
|output=<pre>
Bugnumber:  423987
Stabilization bug detected.
Jobname: gimps
Found the following package atom : =sci-mathematics/gimps-27.7-r1
Unmasked =sci-mathematics/gimps-27.7-r1 in /etc/portage/package.keywords/archtest
No stable rdeps for gimps
Success Report script written to gimps-success.sh
Commit script written to gimps-commit.sh
</pre>}}

This command will generate 4 scripts in your current directory:
{{Cmd |ls
|output= gimps-cleanup.sh  gimps-commit.sh  gimps-success.sh  gimps-useflags.sh
}}

{{RootCmd | sh gimps-useflags.sh}}
''-useflags.sh'' will batch emerge package with different USE flags to make sure everything is ok.
Test results are written to {{Path|./<pkg>.report}}.

{{RootCmd | sh gimps-cleanup.sh}}
''-cleanup.sh'' will remove keyword from {{Path|/etc/portage/package.keywords/archtest}} and created scripts.

{{Note
|tatt assumes that package.keywords is a directory, if you have in this path file, it will not work. Fix is intuitive, backup your package.keywords, create directory with this name instead and place your backup in it.
}}

For further informations, refer to 
[https://github.com/tom111/tatt/blob/master/manual.org tatt's manpage].

= Run testing =
== Executables ==
Generally, programs produce one or more executables. AT should attempt to execute these and check for any problems.
Naturally, some programs are harder to test than others (sci-chemistry/..). Best way to test package that you are unfamiliar with is to extract homepage from ebuild and look for "Quick-start" to test basic functionality.<br />
Sometimes it may be hard to even find executable, in that case script above "rdepscan2" may be useful as it also prints executables installed by package. </br>
Always run test's in console and check for any warnings or errors.
{{Warning | Before reporting bug, make sure it wasn't reported already by other people (bugzillas, gentoo forums).}}

== Libraries ==

These are generally rather hard to test, as new library version may have added ''broken features'' that AT have no chance to caught by using programs that use the library as new ''feature'' is to be rarely implemented ahead of time in current stable user-space.
This is ok, we generally only need to make sure that library does not break current tree. To do that, we can print all programs that depend on library that is being tested and make sure these run fine (re-emerging these ain't bad idea). To do that, use equery:
{{Cmd |equery depends <library name>}}
{{Note|
Such testing may be extremely time and intellectually demanding and as such it is not generally required.
Maintainers should add note to stabilization bug if this is required.
}}

= Bug reporting =
== gentoo bugzilla ==

Gentoo bugzilla is used to report testing results, typical message would look like:
<pre> amd64 : ok (builds, runs) </pre>
Maintainers sometimes tells what-to-test within bug, sometimes they don't. As an AT you are free to test they way you like, however it's good idea to tell others what was tested and what was not in your bugzilla report message.
This is especially true for *big* packages (like firefox or libre-office) which use flag combination tests are time consuming.<br />

If anything goes wrong, it's up to AT to find what's wrong and help fixing it by writing bug reports. Usual drill is:
# create new bug on gentoo's bugzilla and throw in build.log, output of emerge --info --color=n or anything you find useful. 
# edit stabilization bug (add blocker)
# unless this is ebuild related bug or regression caused by gentoo supplied patches, report on upstream bugzilla

== upstream bugzilla ==
{{Note |This is primary way how things get fixed, do not skip this one!}}
This is where you report any failures during compilation, test phase or usage. It's a good idea to read 
[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html How to report bugs effectively] first though.<br />
To make things simpler, link reports on both bugzillas. Also don't forget to drop some means of communication, dev or maintainer may contact you asking for further tests or logs.

= Links =
<todo><links to AT's projects, x86 AT FAQ, Quizzes etc><br />

[http://www.gossamer-threads.com/lists/gentoo/dev/246347 "how to help in arch testing work" @gentoo-dev mailing list]<br />

[http://www.gentoo.org/proj/en/base/x86/arch-testers-faq.xml Gentoo x86 Arch Tester's FAQ]<br />

[http://www.gentoo.org/proj/en/base/amd64/at/procedures.xml Gentoo/AMD64 Arch Testers' Guide]<br />

[http://devmanual.gentoo.org/general-concepts/dependencies/index.html Gentoo Development Guide: Dependencies]<br />

This article aims to explain the basics of an Arch Tester's work.

== Prerequisites ==
This article assumes that the reader passed the Arch Tester (AT) quiz; knows the basics of work with the shell, portage and bugzilla; and knows the drill of package stabilization.
The system used for arch testing should be considered stable, this does not mean that tree must be ''stable'' though.

Recommended tools are:

{| class="wikitable"
|-
! Name !! Description !! How-to-use
|-
| tatt || arch testing tool || [https://github.com/tom111/tatt/blob/master/manual.org tatt's manpage]
|-
| eix || useful utilities for package searching || [http://en.gentoo-wiki.com/wiki/Eix eix on unofficial wiki]
|-
| ccache || compiler cache || [http://linux.die.net/man/1/ccache ccache's manpage]
|}

=== make.conf ===
An AT box should use a mix of reasonably stable global CFLAGS (no -funsafe-optimizations, -funroll-loops etc).
The official x86 AT FAQ suggests these flags:

<pre>
LDFLAGS="${LDFLAGS} -Wl,--hash-style=gnu
FEATURES="test collision-protect"
</pre>

{{Note |<nowiki>
FEATURES=test may be redundant if you plan to use tatt.
</nowiki>}}

Other useful flags are ''GFLAGS="-g3 -ggdb"'' and ''USE="debug"''. These are, however, only meant to be used on a per package basis in case you can (and want to) provide nice bug reports and show some love to developers.

== Build testing ==

=== ebuild checking and repoman ===
Repoman checks ebuilds for common mistakes (hey, maintainers are people too). Rule of thumb dictates that only repoman-checked ebuilds should go into the tree, but this isn't always true, especially if the ebuilds are big and complicated. As an AT, you should be able to use this tool to check ebuilds and then go over ebuild itself to verify that warnings will cause no problems.

<todo> Another thing to do is to remove unneeded die checks in EAPI-4 functions <insert more info here with relevant links>. 

=== tatt ===
app-portage/tatt is simple tool that creates automated test suite that attempts to emerge package with various use-flag combinations. Packages are emerged multiple times so ccache may be very useful and having FEATURES=test is a bad idea time-wise.

Example usage (using bug number):
{{RootCmd |tatt -b 423987 
|output=<pre>
Bugnumber:  423987
Stabilization bug detected.
Jobname: gimps
Found the following package atom : =sci-mathematics/gimps-27.7-r1
Unmasked =sci-mathematics/gimps-27.7-r1 in /etc/portage/package.keywords/archtest
No stable rdeps for gimps
Success Report script written to gimps-success.sh
Commit script written to gimps-commit.sh
</pre>}}

This command will generate 4 scripts in your current directory:
{{Cmd |ls
|output= sylpheed-cleanup.sh  sylpheed-commit.sh  sylpheed-rdeps.sh  sylpheed-success.sh  sylpheed-useflags.sh
}}

{{RootCmd | sh sylpheed-useflags.sh}}
''-useflags.sh'' will batch emerge package with different USE flags to make sure everything is ok.
Test results are written to {{Path|./<pkg>.report}}.

{{RootCmd | sh sylpheed-rdeps.sh }}
''-rdeps.sh'' will reemerge rdeps.

{{RootCmd | sh sylpheed-cleanup.sh}}
''-cleanup.sh'' will remove keyword from {{Path|/etc/portage/package.keywords/archtest}} and created scripts.

{{Note
|tatt assumes that package.keywords is a directory, if you have this as a file instead, it will not work. The fix is intuitive: backup your package.keywords, create a directory with this name instead, and place your backup in it.
}}

For further information about tatt's usage, please read 
[https://github.com/tom111/tatt/blob/master/manual.org tatt's manpage].

=== rdep checking ===
Ago 
[http://www.gossamer-threads.com/lists/gentoo/dev/246347#246347%20 provided] 
a simple shell script that utilizes scanelf (''app-misc/pax-utils'') and qlist (''app-portage/portage-utils'') to check for rdeps:

{{File|/usr/local/bin/rdepscan||
<pre>
#!/bin/bash
qlist -e "$@" | xargs scanelf -L -n -q -F '%n #F' | tr , ' ' | xargs qfile -Cv
| sort -u | awk '{print $1}' | uniq
</pre>}}
{{Note| Some dependencies are covered in an ebuild by inherited eclasses, glibc and such. These are to be ignored.}}

A similar script that uses portage files can be used to see deps on per-exectuable basis:
{{File|/usr/local/bin/rdepscan2||
<pre>
#!/bin/sh
if [ $# -eq 0 ]; then echo "expects package atom as first argument" >&2; exit; fi
find /var/db/pkg -regex ".*$(echo "$@" | sed 's@=@@g').*\\/NEEDED" | xargs cat
</pre>}}

== Run testing ==
=== Executables ===
{{Note|Executables should always be run from a console or by some other means of capturing output (stdout,stderr).}}
Generally, programs produce one or more executables. An AT should attempt to execute these and check for any problems.
Naturally, some programs are harder to test than others (sci-chemistry/..). The best way to test packages that you are unfamiliar with, is to extract the homepage from the ebuild and look for "quickstart" to test basic functionality.

Sometimes it may be hard to even find an executable. In that case the above script "rdepscan2" may be useful as it also prints executables installed by package.

Always run tests in a console, and check for any warnings or errors.
{{Warning | Before reporting any bug, make sure it wasn't reported already by other people.}}

=== Libraries ===

Libraries are generally hard to test, main thing here is to make sure library compiles fine with various useflags (if present) and that test phase finishes fine.
New versions often adds unstable or broken new features, but stable (=older) userspace does not generally use these, thus it's very hard to test these.
It's a good idea to make sure stuff in userspace does not break with updated lib, to see what packages depend on a library that is being tested use equery:

These are generally rather hard to test, as a new library version may have added ''broken features'' that ATs have no chance to catch by using programs that use the library, as new ''features'' are rarely implemented ahead of time in current stable user-space.
{{Cmd |equery depends <library name>}}

Reemerging dependencies is not a bad idea either, thought this isn't always needed (be extra careful with static-libs).
{{Note |Maintainers often add 'todo checklist' for ATs in stabilisation bug.}}

== Bug reporting ==
=== Gentoo bugzilla ===

Gentoo bugzilla is used to report testing results. A typical message would look like:
<pre> amd64 : ok (builds, runs) </pre>
Maintainers sometimes tell what to test within the bug, sometimes they don't. As an AT you are free to test the way you like, however it's a good idea to tell others what was tested and what was not, in your bugzilla report message.
This is especially true for *big* packages (like firefox or libre-office) which useflag combination tests are time-consuming.

If anything goes wrong, it's up to the AT to find out what's wrong, and help fixing it by writing bug reports. The usual drill is:
* create a new bug on Gentoo's bugzilla, and add build.log, output of emerge --info --color=n, or anything you find useful 
* edit stabilization bug (add blocker)
* unless this is an ebuild-related bug or regression caused by Gentoo supplied patches, report on upstream bugzilla

=== upstream bugzilla ===
{{Note |This is the primary way how things get fixed. Do not skip this one!}}
This is where you report any failures during compilation, test phase or usage. It's a good idea to read 
[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html How to report bugs effectively] first though.<br />
To make things simpler, link reports on both bugzillas. Also don't forget to drop some means of communication, as a developer or maintainer may contact you asking for further tests or logs.

== Not sure? ==
If you are not sure about anything, feel free to ask an irc (irc.freenode.net) in ''#gentoo-dev channel'' (or sub-channels like ''#gentoo-dev-amd64''...).
{{Warning| Stuff happens, improperly tested package can cause damage to users or gentoo name (be praised). If you think you can't test package, don't do it, eventually some other AT will test it or determine stability by heuristics (dice roll, goat sacrifice... :))}}

== External resources ==

* [http://www.gossamer-threads.com/lists/gentoo/dev/246347 "How to help in arch testing work" @gentoo-dev mailing list]
* [http://www.gentoo.org/proj/en/base/x86/arch-testers-faq.xml Gentoo x86 Arch Tester's FAQ]
* [http://www.gentoo.org/proj/en/base/amd64/at/procedures.xml Gentoo/AMD64 Arch Testers' Guide]
* [http://devmanual.gentoo.org/general-concepts/dependencies/index.html Gentoo Development Guide: Dependencies]

[[Category:Development]]
